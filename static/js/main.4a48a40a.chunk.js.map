{"version":3,"sources":["data/quiz.js","components/options.jsx","components/nextQuestion.jsx","components/popUpCard.jsx","App.js","serviceWorker.js","index.js"],"names":["quiz","question","options","answer","Options","props","updateClassName","id","onCheckAnswer","document","getElementById","className","setClassName","isAnswered","react_default","a","createElement","onClick","NextQuestion","type","lastQues","PopUpCard","_useState","useState","_useState2","Object","slicedToArray","show","setShow","handleClose","buttonText","window","location","reload","Modal","size","onHide","centered","Header","closeButton","Title","titleText","Body","dangerouslySetInnerHTML","__html","bodyText","Footer","Button","variant","App","state","totalQues","data","length","score","qn","setNextQuesData","_this","setState","toConsumableArray","increaseScore","console","log","checkAnswer","option","handleOnOptionClick","getPopUpText","_this$state","popUpText","this","_this$state2","popUpCard","components_options","nextQuestion","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a48a40a.chunk.js","sourcesContent":["export default [\r\n  {\r\n    question: \"What's used to pass data to a component from outside?\",\r\n    options: [\"state\", \"render with arguments\", \"props\", \"prop types\"],\r\n    answer: 2\r\n  },\r\n  {\r\n    question: \"React is a ________\",\r\n    options: [\r\n      \"JavaScript Library\",\r\n      \"JavaScript Framework\",\r\n      \"Both\",\r\n      \"None of the above\"\r\n    ],\r\n    answer: 0\r\n  },\r\n  {\r\n    question: \"props in React _______\",\r\n    options: [\r\n      \"can be changed inside the component\",\r\n      \"cannot be changed in the component\",\r\n      \"cannot be changed in side other component\",\r\n      \"None of the above\"\r\n    ],\r\n    answer: 1\r\n  },\r\n  {\r\n    question: \"How do you access a function fetch() from a h1 element in JSX?\",\r\n    options: [\r\n      \"<h1>{fetch()}</h1>\",\r\n      \"<h1>${fetch()}</h1>\",\r\n      \"<h1>{fetch}</h1>\",\r\n      \"<h1>${fetch}</h1>\"\r\n    ],\r\n    answer: 0\r\n  },\r\n  {\r\n    question:\r\n      \" Which method in a React Component should you override to stop the component from updating?\",\r\n    options: [\r\n      \"willComponentUpdate\",\r\n      \"shouldComponentUpdate\",\r\n      \"componentDidUpdate\",\r\n      \"componentDidMount\"\r\n    ],\r\n    answer: 1\r\n  },\r\n  {\r\n    question:\r\n      \"Which method in a React Component is called after the component is rendered for the first time?\",\r\n    options: [\r\n      \"componentDidUpdate\",\r\n      \"componentDidMount\",\r\n      \"componentMounted\",\r\n      \"componentUpdated\"\r\n    ],\r\n    answer: 1\r\n  },\r\n  {\r\n    question: \"What happens when you call setState() inside render() method?\",\r\n    options: [\r\n      \"Repetitive output appears on the screen\",\r\n      \"Stack overflow error\",\r\n      \"Duplicate key error\",\r\n      \"Nothing happens. Life goes on!\"\r\n    ],\r\n    answer: 1\r\n  },\r\n  {\r\n    question:\r\n      \"How do you write an inline style specifying the font-size:12px and color:red; in JSX\",\r\n    options: [\r\n      \"style={{font-size:12,color:'red'}}\",\r\n      \"style={{fontSize:'12px',color:'red'}}\",\r\n      \"style={fontSize:'12px',color:'red'}\",\r\n      \"style={{font-size:12px,color:'red'}}\"\r\n    ],\r\n    answer: 1\r\n  }\r\n];\r\n\r\n/* Format\r\n,\r\n{\r\n    question: \"\",\r\n    options: [\"\", \"\", \"\", \"\"],\r\n    answer: \r\n}\r\n  */\r\n","import React from \"react\";\r\n\r\n//STATELESS FUNCTIONAL COMPONENT - sfc\r\n// NOTE: Dont use \"this.props\" in sfc, use \"props\"\r\n//       Dont use arrow functions use \"function\" to define functions\r\nconst Options = props => {\r\n  function updateClassName(id) {\r\n    props.onCheckAnswer(id)\r\n      ? (document.getElementById(id).className =\r\n          \"p-4 border option correctOption\")\r\n      : (document.getElementById(id).className =\r\n          \"p-4 border option wrongOption\");\r\n  }\r\n\r\n  function setClassName(id) {\r\n    if (!props.isAnswered) {\r\n      return \"p-4 border option bg-info\";\r\n    } else {\r\n      return document.getElementById(id).className;\r\n    }\r\n  }\r\n\r\n  const { options } = props; //dont use \"this.props\" in sfc, use \"props\"\r\n\r\n  return (\r\n    <React-Fragment>\r\n      <div className=\"flex-container d-flex flex-wrap bg-light text-white\">\r\n        <div\r\n          id=\"0\"\r\n          className={setClassName(0)}\r\n          onClick={() => {\r\n            if (!props.isAnswered) {\r\n              props.onClick(0);\r\n              updateClassName(0);\r\n            }\r\n          }}\r\n        >\r\n          {options[0]}\r\n        </div>\r\n        <div\r\n          id=\"1\"\r\n          onClick={() => {\r\n            if (!props.isAnswered) {\r\n              props.onClick(1);\r\n              updateClassName(1);\r\n            }\r\n          }}\r\n          className={setClassName(1)}\r\n        >\r\n          {options[1]}\r\n        </div>\r\n        <div\r\n          id=\"2\"\r\n          onClick={() => {\r\n            if (!props.isAnswered) {\r\n              props.onClick(2);\r\n              updateClassName(2);\r\n            }\r\n          }}\r\n          className={setClassName(2)}\r\n        >\r\n          {options[2]}\r\n        </div>\r\n        <div\r\n          id=\"3\"\r\n          onClick={() => {\r\n            if (!props.isAnswered) {\r\n              props.onClick(3);\r\n              updateClassName(3);\r\n            }\r\n          }}\r\n          className={setClassName(3)}\r\n        >\r\n          {options[3]}\r\n        </div>\r\n      </div>\r\n    </React-Fragment>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React from \"react\";\r\n\r\nconst NextQuestion = props => {\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        props.onClick();\r\n      }}\r\n      type=\"button\"\r\n      className={\"btn btn-dark btn-lg\"}\r\n    >\r\n      {props.lastQues ? \"Finish Quiz\" : \"Next Question\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default NextQuestion;\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n/*Used React-Bootstrap to implement Modal in React as normal Bootstarp requires \r\n  running a jQuery function to to automatically open it on page load. React-Bootstap is simple & easy  */\r\n\r\n//the \"show\" is a state property, that is directly connected to <Modal> component's visibilty.\r\n//See Class Component implementation of below, commented after sfc implementation\r\nconst PopUpCard = props => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  const handleClose = () => {\r\n    props.buttonText === \"Restart\" ? window.location.reload() : setShow(false); //Restart application on \"Restart\" otherwise closes popUpCard\r\n  };\r\n\r\n  return (\r\n    <React-Fragment>\r\n      <Modal size=\"lg\" show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton className=\"bg-info\">\r\n          <Modal.Title className=\"text-center\">\r\n            <h3 className=\"modalTitle\">{props.titleText}</h3>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body\r\n          className=\"modalBody\"\r\n          dangerouslySetInnerHTML={{ __html: props.bodyText }} //note\r\n        />\r\n\r\n        <Modal.Footer className=\"modalFooter justify-content-center\">\r\n          <Button\r\n            variant=\"info\"\r\n            onClick={handleClose}\r\n            size=\"lg\"\r\n            className=\"startButton\"\r\n          >\r\n            <b>{props.buttonText}</b>\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </React-Fragment>\r\n  );\r\n};\r\n\r\nexport default PopUpCard;\r\n\r\n//-------------------------------- CLASS COMPONENT IMPLEMENTATION ------------------------------------------\r\n// import React, { Component } from 'react';\r\n// import { Modal, Button } from \"react-bootstrap\";\r\n\r\n// class PopUpCard extends Component {\r\n//     state = { show:true}\r\n\r\n//     handleClose=()=>{\r\n//         this.setState({show:false})\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <React-Fragment>\r\n//               <Modal size=\"lg\" show={this.state.show} onHide={this.handleClose} centered>\r\n//                 <Modal.Header closeButton>\r\n//                   <Modal.Title className=\"text-center\">\r\n//                     <h3 className=\"modalTitle\">Welcome to React Quiz</h3>\r\n//                   </Modal.Title>\r\n//                 </Modal.Header>\r\n\r\n//                 <Modal.Body className=\"modalBody\">\r\n//                   This is a quiz application built using ReactJS. <br />\r\n//                   <br />\r\n//                   It will dynamically load the question->answers pair and upload them\r\n//                   into the components.\r\n//                 </Modal.Body>\r\n\r\n//                 <Modal.Footer className=\"modalFooter justify-content-center\">\r\n//                   <Button variant=\"primary\" onClick={this.handleClose}>\r\n//                     Start the Quiz\r\n//                   </Button>\r\n//                 </Modal.Footer>\r\n//               </Modal>\r\n//             </React-Fragment>\r\n//           );\r\n//     }\r\n// }\r\n\r\n// export default PopUpCard;\r\n","import React, { Component } from \"react\";\n//import \"./App.css\";\nimport data from \"./data/quiz\";\nimport Options from \"./components/options\";\nimport NextQuestion from \"./components/nextQuestion\";\nimport PopUpCard from \"./components/popUpCard\";\n\n//replacing sfc with class component\nclass App extends Component {\n  state = {\n    question: \"\", //intialized with data in quiz.js, with question property of object, from array of objects\n    options: [],\n    answer: 0,\n    totalQues: data.length,\n    score: 0,\n    qn: -1, //current question index\n    isAnswered: false //if Question is answered by user i.e, option is selected\n  };\n\n  //Gets question from json in quiz.js\n  setNextQuesData = () => {\n    let { qn } = this.state;\n    qn++;\n    if (qn < this.state.totalQues)\n      this.setState({\n        question: data[qn].question,\n        options: [...data[qn].options],\n        answer: data[qn].answer,\n        qn: qn,\n        isAnswered: false\n      });\n    else this.setState({ qn: qn });\n  };\n\n  componentDidMount() {\n    this.setNextQuesData(this.state.qn);\n  }\n\n  increaseScore = () => {\n    let score = this.state.score;\n    score++;\n    this.setState({ score });\n    console.log(\"state score:\", this.state.score); // shows score to be one less than actual score: need to research\n  };\n\n  checkAnswer = option => {\n    const { qn } = this.state;\n    return option === data[qn].answer ? true : false;\n  };\n\n  handleOnOptionClick = option => {\n    const answer = this.checkAnswer(option);\n    console.log(answer);\n    if (answer) this.increaseScore();\n    this.setState({ isAnswered: true });\n  };\n\n  getPopUpText = () => {\n    {\n      const { qn, totalQues } = this.state;\n      const popUpText = new Object();\n\n      if (qn === totalQues) {\n        popUpText.titleText = \"Congratulations !\";\n        popUpText.bodyText =\n          \"You have completed the quiz. <br /><br />You got: \" +\n          this.state.score +\n          \" out of \" +\n          totalQues +\n          \" questions right.\";\n        popUpText.buttonText = \"Restart\";\n\n        return popUpText;\n      }\n      popUpText.titleText = \"Welcome to React Quiz\";\n      popUpText.bodyText =\n        \"This is a quiz application built using ReactJS. <br /><br /> It will dynamically load the question->answers pair and upload them into the components.\";\n      popUpText.buttonText = \"START THE QUIZ\";\n\n      return popUpText;\n    }\n  };\n  render() {\n    const { qn, totalQues } = this.state;\n    const popUpText = this.getPopUpText();\n\n    return (\n      <div className=\"container\">\n        {(qn === 0 || qn === totalQues) && (\n          <PopUpCard\n            titleText={popUpText.titleText}\n            bodyText={popUpText.bodyText}\n            buttonText={popUpText.buttonText}\n          />\n        )}\n\n        <div className=\"card col-md-10 offset-md-1 vertical-center\">\n          <h4 className=\"card-header\">\n            {qn < totalQues ? qn + 1 : totalQues}. {this.state.question}\n          </h4>\n\n          <Options\n            options={this.state.options}\n            onClick={this.handleOnOptionClick}\n            onCheckAnswer={this.checkAnswer}\n            isAnswered={this.state.isAnswered}\n          />\n\n          {this.state.isAnswered && (\n            <NextQuestion\n              onClick={this.setNextQuesData}\n              lastQues={qn + 1 >= totalQues}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\"; //Import bootstrap first then custom css file, to overide bootstap styles\n\nimport \"./App.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}